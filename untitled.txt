Quicknote for Computer Security: a hands on approach

Set-UID program in UNIX systems: Set-UID programs are owned by root, read and writable by only root user, and have privilege assigned by root user to certain tasks. It has a special set-UID bit to determine if it is a set-UID program. In UNIX, to make a program with set-UID bit, do the following:


sudo chown root <program name> 
sudo chmod 4755 <program name>

this will make the program with root privilege (euid = 0) 

Security holes: 
1. a set-UID program with ability / functionality to invoke a shell (this will make it a root shell), or the ability to invoke other programs in general (such as editors) 

2. User Input: if not validated or sanitized, could cause trouble 
example: chsh program does not recognize input could be two lines. seperated by ; 
<some command>; <malicious command>  
For this particular case, attacker can create a user with arbitrary privilege. 
It can then potentially give a root shell 

3. system inputs: the program might need to perform task in predefined path or filename. The attacker can create a duplicate or simply create a symbolic link to (i.e /etc/shadow) 

4. Environment variables: most clearly in the case of system() call. Which invokes /bin/bash, which then looks for PATH environment variable. Attaker can change or inject into PATH, so as to introduce their malicious executables in the PATH for the victim to execute. 

5. Set-UID program that does not recycle file descriptors, so even though the file I/O could prevent attackers for injecting code, the file descriptor can still be used. (capability leaking) 

6. Any syscalls that require the PATH environment variable is prone to the attack, execve() is safe since it directly executes the command without a middle /bin/bash, but not for execle, execv, execvp, and execvpe. 

7. Perl's open() and PHP's system has the same problem as C's system() 

The countermeasure is thus to strcitly separate data from code. Restricting input to be only data, not code. But that is usually hard and sometimes hurt performance.

Or to define a multitude of privilege levels, (instead of simply root and normal user) 

------------------------------------------------------------------------------------































